module snakes;

// General utility to get all but the last element of a list
init xs = case xs of
		[_]		: [];
		h :: t	: h :: (init t);
		_		: [];
	esac;

typedef t_point = {x is number, y is number};
typedef t_direction = (t_point -> t_point);
typedef t_snake = {direction is t_direction, points is list<t_point>};
typedef t_board = {width is number, height is number};

// Functions that create a new point in a given direction
left {x, y} = {x  = x - 1, y};
right {x, y} = {x = x + 1, y};
up {x, y} = {x, y = y - 1};
down {x, y} = {x, y = y + 1};

newSnake direction origin length is string -> t_point -> t_direction -> number -> t_snake =
	{direction, points = fold (_ xs = (direction (head xs))::xs) [origin] [1..length]};

moveSnake snake is t_snake -> t_snake =
	snake with {points = (snake.direction (head snake.points)) :: (init snake.points)};

growSnake snake is t_snake -> t_snake =
	snake with {points = (snake.direction (head snake.points)) :: snake.points};

sameAxis? dir1 dir2 is t_direction -> t_direction -> boolean =
	contains dir1 [up, down] == contains dir2 [up, down];

turnSnake snake direction is t_snake -> t_direction -> t_snake =
	if sameAxis? snake.direction direction then
		snake
	else
		snake with {direction}
	fi;

randomApple {width height} =
	{x = randomInt width, y = randomInt height};

// check moves and update score if apple encountered
snakeInBoard? snake board is t_snake -> t_board -> boolean =
	(f {x, y} {width, height} =
		x >= 0 and x < width and y >= 0 and y <= height) (head snake.points) board;

snakeEatApple snake apple is t_snake -> t_point -> boolean =
	(head snake.points) == apple;

//TODO progress one step in the game
typedef t_status = Play t_snake | Lost ();

// Variables of the game
board = {width = 80, height = 60};
var apple = randomApple board;
var snake = newSnake right {x = board.width / 2, y = board.height / 2} 5;

progress () =
	(
	 );

//TODO draw functions
import java.awt.Color;
import java.awt.Graphics;

size = 10;

drawSnake g snake is ~Graphics -> t_snake -> () =
	(g#setColor(Color#GREEN);
	 for snake.points (_ {x, y} = g#fillRect(x, y)));
drawApple g {x, y} is ~Graphics -> t_point -> () =
	(g#setColor(Color#RED);
	 g#fillRect(x, y));

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JFrame;

class Game extends JFrame, ActionListener, KeyListener
	void actionPerformed(ActionEvent e)
		snake := progress snake;
		this#repaint(),
	
	void keyPressed(KeyEvent e)
		,
	
	void paintComponent(Graphics g)
		drawApple g apple;
		drawSnake g snake

end;

// Initialize game frame and timer
import javax.swing.Timer;
game () =
	(frame = new Game();
	 frame#addKeyListener(frame);
	 frame#setSize(board.width, board.height);
	 frame#setLocationRelativeTo(() as ~java.awt.Component);
	 frame#setDefaultCloseOperation(frame#EXIT_ON_CLOSE);
	 frame#setVisible(true);
	 timer = new Timer(200, frame);
	 timer#start());

// Start the game immediately
game ();
